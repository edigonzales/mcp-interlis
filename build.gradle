plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

apply from: "$rootDir/gradle/versioning.gradle"
apply from: "$rootDir/gradle/docker.gradle"

group = 'ch.so.agi'

sourceSets {
    e2e {
        java.srcDir 'src/e2e/java'
        resources.srcDir 'src/e2e/resources'
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
  }
}

java { 
    toolchain { 
        languageVersion = JavaLanguageVersion.of(21) 
    } 
}

repositories { 
    mavenCentral() 
}

ext {
    set('springAiVersion', "1.0.2")
}

configurations {
    e2eImplementation.extendsFrom testImplementation
    e2eRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation "org.springframework.ai:spring-ai-starter-mcp-server"
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
        
    e2eImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform() {
        excludeTags 'e2e'
    }
}

bootJar { 
    archiveFileName = 'interlis-mcp.jar' 
}

tasks.register('e2eTest', Test) {
    description = 'Runs end-to-end tests.'
    group = 'verification'
    testClassesDirs = sourceSets.e2e.output.classesDirs
    classpath = sourceSets.e2e.runtimeClasspath
    shouldRunAfter tasks.test
    // optional filters/tags:
    //systemProperty 'junit.jupiter.tags', 'e2e'
    //include '**/*E2E*'
    useJUnitPlatform() {
        includeTags 'e2e'
    }

}

//tasks.check { dependsOn tasks.named('e2eTest') }
